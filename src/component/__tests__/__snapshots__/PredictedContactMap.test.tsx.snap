// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PredictedContactMap Snapshots Should match existing snapshot when given empty data. 1`] = `
<div
  id="PredictedContactMapComponent"
>
  <ContactMap
    addCandidateResidues={[Function]}
    addHoveredResidues={[Function]}
    addLockedResiduePair={[Function]}
    candidateResidues={Array []}
    clearAllResidues={[Function]}
    configurations={
      Array [
        Object {
          "name": "Linear Distance Filter (|i - j|)",
          "onChange": [Function],
          "values": Object {
            "default": 5,
            "max": 10,
            "min": 1,
          },
        },
        Object {
          "name": "Top N Predictions to Show",
          "onChange": [Function],
          "values": Object {
            "default": 29,
            "max": 59,
            "min": 1,
          },
        },
      ]
    }
    correctColor="#ff0000"
    data={
      Object {
        "computedPoints": Array [
          Object {
            "hoverinfo": "x+y",
            "marker": Object {
              "colorscale": Array [
                Array [
                  0,
                  "rgb(12,50,102)",
                ],
                Array [
                  0.1,
                  "rgb(17,83,150)",
                ],
                Array [
                  0.2,
                  "rgb(40,114,175)",
                ],
                Array [
                  0.3,
                  "rgb(71,147,193)",
                ],
                Array [
                  0.4,
                  "rgb(111,175,209)",
                ],
                Array [
                  0.5,
                  "rgb(160,202,222)",
                ],
                Array [
                  0.6,
                  "rgb(200,219,237)",
                ],
                Array [
                  0.7,
                  "rgb(224,235,246)",
                ],
                Array [
                  0.8,
                  "rgb(247,251,255)",
                ],
                Array [
                  0.9,
                  "rgb(249,253,255)",
                ],
                Array [
                  1,
                  "rgb(255,255,255)",
                ],
              ],
            },
            "name": "Known Structure Contact",
            "nodeSize": 4,
            "points": Array [],
            "subtitle": "(from PDB structure)",
          },
          Object {
            "hoverinfo": "x+y",
            "marker": Object {
              "color": "#000000",
            },
            "name": "Predicted Contact",
            "nodeSize": 4,
            "points": Array [],
            "subtitle": "(29, L=0)",
          },
          Object {
            "hoverinfo": "x+y",
            "marker": Object {
              "color": "#ff0000",
            },
            "name": "Correct Prediction",
            "nodeSize": 6,
            "points": Array [],
            "subtitle": "(0, NaN%)",
          },
        ],
        "secondaryStructures": Array [],
      }
    }
    height={400}
    hoveredResidues={Array []}
    incorrectColor="#000000"
    lockedResiduePairs={Map {}}
    observedColor="#0000ff"
    padding={0}
    removeAllLockedResiduePairs={[Function]}
    removeCandidateResidues={[Function]}
    removeHoveredResidues={[Function]}
    removeLockedResiduePair={[Function]}
    toggleLockedResiduePair={[Function]}
    width={400}
  />
</div>
`;

exports[`PredictedContactMap Snapshots Should match existing snapshot when given no data. 1`] = `
<div
  id="PredictedContactMapComponent"
>
  <ContactMap
    addCandidateResidues={[Function]}
    addHoveredResidues={[Function]}
    addLockedResiduePair={[Function]}
    candidateResidues={Array []}
    clearAllResidues={[Function]}
    configurations={
      Array [
        Object {
          "name": "Linear Distance Filter (|i - j|)",
          "onChange": [Function],
          "values": Object {
            "default": 5,
            "max": 10,
            "min": 1,
          },
        },
        Object {
          "name": "Top N Predictions to Show",
          "onChange": [Function],
          "values": Object {
            "default": 29,
            "max": 59,
            "min": 1,
          },
        },
      ]
    }
    correctColor="#ff0000"
    data={
      Object {
        "computedPoints": Array [
          Object {
            "hoverinfo": "x+y",
            "marker": Object {
              "colorscale": Array [
                Array [
                  0,
                  "rgb(12,50,102)",
                ],
                Array [
                  0.1,
                  "rgb(17,83,150)",
                ],
                Array [
                  0.2,
                  "rgb(40,114,175)",
                ],
                Array [
                  0.3,
                  "rgb(71,147,193)",
                ],
                Array [
                  0.4,
                  "rgb(111,175,209)",
                ],
                Array [
                  0.5,
                  "rgb(160,202,222)",
                ],
                Array [
                  0.6,
                  "rgb(200,219,237)",
                ],
                Array [
                  0.7,
                  "rgb(224,235,246)",
                ],
                Array [
                  0.8,
                  "rgb(247,251,255)",
                ],
                Array [
                  0.9,
                  "rgb(249,253,255)",
                ],
                Array [
                  1,
                  "rgb(255,255,255)",
                ],
              ],
            },
            "name": "Known Structure Contact",
            "nodeSize": 4,
            "points": Array [],
            "subtitle": "(from PDB structure)",
          },
          Object {
            "hoverinfo": "x+y",
            "marker": Object {
              "color": "#000000",
            },
            "name": "Predicted Contact",
            "nodeSize": 4,
            "points": Array [],
            "subtitle": "(29, L=0)",
          },
          Object {
            "hoverinfo": "x+y",
            "marker": Object {
              "color": "#ff0000",
            },
            "name": "Correct Prediction",
            "nodeSize": 6,
            "points": Array [],
            "subtitle": "(0, NaN%)",
          },
        ],
        "secondaryStructures": Array [],
      }
    }
    height={400}
    hoveredResidues={Array []}
    incorrectColor="#000000"
    lockedResiduePairs={Map {}}
    observedColor="#0000ff"
    padding={0}
    removeAllLockedResiduePairs={[Function]}
    removeCandidateResidues={[Function]}
    removeHoveredResidues={[Function]}
    removeLockedResiduePair={[Function]}
    toggleLockedResiduePair={[Function]}
    width={400}
  />
</div>
`;

exports[`PredictedContactMap Snapshots Should match snapshot when locked residues are added. 1`] = `
<div
  id="PredictedContactMapComponent"
>
  <ContactMap
    addCandidateResidues={[Function]}
    addHoveredResidues={[Function]}
    addLockedResiduePair={[Function]}
    candidateResidues={Array []}
    clearAllResidues={[Function]}
    configurations={
      Array [
        Object {
          "name": "Linear Distance Filter (|i - j|)",
          "onChange": [Function],
          "values": Object {
            "default": 5,
            "max": 10,
            "min": 1,
          },
        },
        Object {
          "name": "Top N Predictions to Show",
          "onChange": [Function],
          "values": Object {
            "default": 29,
            "max": 59,
            "min": 1,
          },
        },
      ]
    }
    correctColor="#ff0000"
    data={
      Object {
        "computedPoints": Array [
          Object {
            "hoverinfo": "x+y",
            "marker": Object {
              "colorscale": Array [
                Array [
                  0,
                  "rgb(12,50,102)",
                ],
                Array [
                  0.1,
                  "rgb(17,83,150)",
                ],
                Array [
                  0.2,
                  "rgb(40,114,175)",
                ],
                Array [
                  0.3,
                  "rgb(71,147,193)",
                ],
                Array [
                  0.4,
                  "rgb(111,175,209)",
                ],
                Array [
                  0.5,
                  "rgb(160,202,222)",
                ],
                Array [
                  0.6,
                  "rgb(200,219,237)",
                ],
                Array [
                  0.7,
                  "rgb(224,235,246)",
                ],
                Array [
                  0.8,
                  "rgb(247,251,255)",
                ],
                Array [
                  0.9,
                  "rgb(249,253,255)",
                ],
                Array [
                  1,
                  "rgb(255,255,255)",
                ],
              ],
            },
            "name": "Known Structure Contact",
            "nodeSize": 4,
            "points": Array [],
            "subtitle": "(from PDB structure)",
          },
          Object {
            "hoverinfo": "x+y",
            "marker": Object {
              "color": "#000000",
            },
            "name": "Predicted Contact",
            "nodeSize": 4,
            "points": Array [],
            "subtitle": "(29, L=0)",
          },
          Object {
            "hoverinfo": "x+y",
            "marker": Object {
              "color": "#ff0000",
            },
            "name": "Correct Prediction",
            "nodeSize": 6,
            "points": Array [],
            "subtitle": "(0, NaN%)",
          },
        ],
        "secondaryStructures": Array [],
      }
    }
    height={400}
    hoveredResidues={Array []}
    incorrectColor="#000000"
    lockedResiduePairs={
      Object {
        "37,46": Array [
          37,
          46,
        ],
        "8": Array [
          8,
        ],
      }
    }
    observedColor="#0000ff"
    padding={0}
    removeAllLockedResiduePairs={[Function]}
    removeCandidateResidues={[Function]}
    removeHoveredResidues={[Function]}
    removeLockedResiduePair={[Function]}
    toggleLockedResiduePair={[Function]}
    width={400}
  />
</div>
`;
