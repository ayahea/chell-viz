// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ContactMap Snapshots Should match existing snapshot when given empty data. 1`] = `<[object Object] />`;

exports[`ContactMap Snapshots Should match existing snapshot when given no data. 1`] = `<[object Object] />`;

exports[`ContactMap Snapshots Should match existing snapshot when given sample data and sliders are _not_ enabled. 1`] = `
<div
  id="ContactMapComponent"
  style={
    Object {
      "padding": 0,
    }
  }
>
  <div
    className="plotly-chart"
  />
</div>
`;

exports[`ContactMap Snapshots Should match existing snapshot when given sample data and sliders are enabled. 1`] = `
<div
  id="ContactMapComponent"
  style={
    Object {
      "padding": 0,
    }
  }
>
  <div
    className="plotly-chart"
  />
  <div>
    <div
      className="node-size-slider"
      style={
        Object {
          "padding": 20,
        }
      }
    >
      <p>
        Node Size: 3
      </p>
      <div
        className="rc-slider"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        onTouchStart={[Function]}
        style={
          Object {
            "width": 360,
          }
        }
      >
        <div
          className="rc-slider-rail"
          style={Object {}}
        />
        <div
          className="rc-slider-track"
          style={
            Object {
              "left": "0%",
              "width": "50%",
            }
          }
        />
        <div
          className="rc-slider-step"
        />
        <div
          aria-disabled={false}
          aria-valuemax={5}
          aria-valuemin={1}
          aria-valuenow={3}
          className="rc-slider-handle"
          role="slider"
          style={
            Object {
              "left": "50%",
            }
          }
          tabIndex={0}
        />
        <div
          className="rc-slider-mark"
        />
      </div>
    </div>
    <div
      className="linear-dist-filter"
      style={
        Object {
          "padding": 20,
        }
      }
    >
      <p>
        Linear Distance Filter (|i - j|): 5
      </p>
      <div
        className="rc-slider"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        onTouchStart={[Function]}
        style={
          Object {
            "width": 360,
          }
        }
      >
        <div
          className="rc-slider-rail"
          style={Object {}}
        />
        <div
          className="rc-slider-track"
          style={
            Object {
              "left": "0%",
              "width": "44.44444444444444%",
            }
          }
        />
        <div
          className="rc-slider-step"
        />
        <div
          aria-disabled={false}
          aria-valuemax={10}
          aria-valuemin={1}
          aria-valuenow={5}
          className="rc-slider-handle"
          role="slider"
          style={
            Object {
              "left": "44.44444444444444%",
            }
          }
          tabIndex={0}
        />
        <div
          className="rc-slider-mark"
        />
      </div>
    </div>
    <div
      className="predicted-contact-slider"
      style={
        Object {
          "padding": 20,
        }
      }
    >
      <p>
        Top N Predictions to Show: 29
      </p>
      <div
        className="rc-slider"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        onTouchStart={[Function]}
        style={
          Object {
            "width": 360,
          }
        }
      >
        <div
          className="rc-slider-rail"
          style={Object {}}
        />
        <div
          className="rc-slider-track"
          style={
            Object {
              "left": "0%",
              "width": "48.275862068965516%",
            }
          }
        />
        <div
          className="rc-slider-step"
        />
        <div
          aria-disabled={false}
          aria-valuemax={59}
          aria-valuemin={1}
          aria-valuenow={29}
          className="rc-slider-handle"
          role="slider"
          style={
            Object {
              "left": "48.275862068965516%",
            }
          }
          tabIndex={0}
        />
        <div
          className="rc-slider-mark"
        />
      </div>
    </div>
  </div>
</div>
`;

exports[`ContactMap Snapshots Should match snapshot when locked residues are added. 1`] = `
<ContactMapClass
  correctColor="#ff0000"
  data={
    Object {
      "couplingScores": Array [
        Object {
          "dist": 2.4,
          "i": 56,
          "j": 50,
        },
        Object {
          "dist": 20.4,
          "i": 42,
          "j": 50,
        },
        Object {
          "dist": 1.3,
          "i": 41,
          "j": 52,
        },
        Object {
          "dist": 1.3,
          "i": 45,
          "j": 46,
        },
        Object {
          "dist": 1.3,
          "i": 44,
          "j": 45,
        },
        Object {
          "dist": 1.3,
          "i": 56,
          "j": 57,
        },
      ],
    }
  }
  enableSliders={false}
  height={400}
  highlightColor="#ffff00"
  incorrectColor="#000000"
  lockedResiduePairs={
    Object {
      "37,46": Array [
        37,
        46,
      ],
      "8": Array [
        8,
      ],
    }
  }
  observedColor="#0000ff"
  padding={0}
  width={400}
>
  <div
    id="ContactMapComponent"
    style={
      Object {
        "padding": 0,
      }
    }
  >
    <ContactMapChartClass
      candidateResidues={Array []}
      data={
        Array [
          Object {
            "marker": Object {
              "colorscale": Array [
                Array [
                  0,
                  "#0000ff",
                ],
                Array [
                  1,
                  "rgb(100,177,200)",
                ],
              ],
            },
            "name": "Observed",
            "points": Array [
              Object {
                "dist": 2.4,
                "i": 56,
                "j": 50,
              },
              Object {
                "dist": 1.3,
                "i": 41,
                "j": 52,
              },
              Object {
                "dist": 1.3,
                "i": 45,
                "j": 46,
              },
              Object {
                "dist": 1.3,
                "i": 44,
                "j": 45,
              },
              Object {
                "dist": 1.3,
                "i": 56,
                "j": 57,
              },
            ],
          },
          Object {
            "hoverinfo": "x+y",
            "marker": Object {
              "color": "#000000",
            },
            "name": "Incorrect Prediction",
            "points": Array [
              Object {
                "dist": 2.4,
                "i": 56,
                "j": 50,
              },
              Object {
                "dist": 20.4,
                "i": 42,
                "j": 50,
              },
              Object {
                "dist": 1.3,
                "i": 41,
                "j": 52,
              },
            ],
          },
          Object {
            "hoverinfo": "x+y",
            "marker": Object {
              "color": "#ff0000",
            },
            "name": "Correct Prediction",
            "points": Array [
              Object {
                "dist": 2.4,
                "i": 56,
                "j": 50,
              },
              Object {
                "dist": 1.3,
                "i": 41,
                "j": 52,
              },
            ],
          },
          Object {
            "marker": Object {
              "color": "#ffff00",
              "opacity": 0.5,
            },
            "name": "Selected Residue Pairs",
            "points": Array [
              Object {
                "i": 37,
                "j": 46,
              },
            ],
          },
        ]
      }
      dataTransformFn={[Function]}
      hoveredResidues={Array []}
      nodeSize={3}
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      range={
        Array [
          0,
          62,
        ]
      }
    >
      <PlotlyChartClass
        config={Object {}}
        data={
          Array [
            Object {
              "hoverinfo": "none",
              "marker": Object {
                "color": Array [
                  2.4,
                  1.3,
                  1.3,
                  1.3,
                  1.3,
                  2.4,
                  1.3,
                  1.3,
                  1.3,
                  1.3,
                ],
                "colorscale": Array [
                  Array [
                    0,
                    "#0000ff",
                  ],
                  Array [
                    1,
                    "rgb(100,177,200)",
                  ],
                ],
                "size": 6,
              },
              "mode": "markers",
              "name": "Observed",
              "type": "scattergl",
              "x": Array [
                56,
                41,
                45,
                44,
                56,
                50,
                52,
                46,
                45,
                57,
              ],
              "y": Array [
                50,
                52,
                46,
                45,
                57,
                56,
                41,
                45,
                44,
                56,
              ],
              "z": Array [
                2.4,
                1.3,
                1.3,
                1.3,
                1.3,
                2.4,
                1.3,
                1.3,
                1.3,
                1.3,
              ],
            },
            Object {
              "hoverinfo": "none",
              "marker": Object {
                "color": "#000000",
                "size": 6,
              },
              "mode": "markers",
              "name": "Incorrect Prediction",
              "type": "scattergl",
              "x": Array [
                56,
                42,
                41,
                50,
                50,
                52,
              ],
              "y": Array [
                50,
                50,
                52,
                56,
                42,
                41,
              ],
              "z": Array [
                2.4,
                20.4,
                1.3,
                2.4,
                20.4,
                1.3,
              ],
            },
            Object {
              "hoverinfo": "none",
              "marker": Object {
                "color": "#ff0000",
                "size": 6,
              },
              "mode": "markers",
              "name": "Correct Prediction",
              "type": "scattergl",
              "x": Array [
                56,
                41,
                50,
                52,
              ],
              "y": Array [
                50,
                52,
                56,
                41,
              ],
              "z": Array [
                2.4,
                1.3,
                2.4,
                1.3,
              ],
            },
            Object {
              "hoverinfo": "none",
              "marker": Object {
                "color": "#ffff00",
                "opacity": 0.5,
                "size": 6,
              },
              "mode": "markers",
              "name": "Selected Residue Pairs",
              "type": "scattergl",
              "x": Array [
                37,
                46,
              ],
              "y": Array [
                46,
                37,
              ],
              "z": Array [
                undefined,
                undefined,
              ],
            },
          ]
        }
        layout={
          Object {
            "legend": Object {
              "orientation": "h",
            },
            "showlegend": true,
            "xaxis": Object {
              "autorange": false,
              "range": Array [
                0,
                62,
              ],
            },
            "yaxis": Object {
              "autorange": false,
              "range": Array [
                62,
                0,
              ],
            },
          }
        }
        onClickCallback={[Function]}
        onHoverCallback={[Function]}
        onSelectedCallback={[Function]}
        onUnHoverCallback={[Function]}
      >
        <div
          className="plotly-chart"
        />
      </PlotlyChartClass>
    </ContactMapChartClass>
  </div>
</ContactMapClass>
`;
