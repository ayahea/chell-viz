// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ContactMap Should match existing snapshot using ScatterGL is toggled off. 1`] = `
<ContactMapClass
  correctColor="#ff0000"
  data={
    Object {
      "couplingScores": Array [],
    }
  }
  enableSliders={false}
  height={400}
  highlightColor="#ff0000"
  incorrectColor="#000000"
  observedColor="#0000ff"
  padding={0}
  width={400}
>
  <div
    id="ContactMapComponent"
    style={
      Object {
        "padding": 0,
      }
    }
  >
    <ScatterChartClass
      candidateResidues={Array []}
      data={
        Array [
          Object {
            "color": "#0000ff",
            "name": "Observed",
            "points": Array [],
          },
          Object {
            "color": "#000000",
            "name": "Incorrect Prediction",
            "points": Array [],
          },
          Object {
            "color": "#ff0000",
            "name": "Correct Prediction",
            "points": Array [],
          },
        ]
      }
      height={400}
      hoveredResidues={Array []}
      nodeSize={3}
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      width={400}
    >
      <PlotlyChart
        config={
          Object {
            "displayModeBar": true,
          }
        }
        data={
          Array [
            Object {
              "marker": Object {
                "color": "#0000ff",
                "size": 6,
              },
              "mode": "markers",
              "name": "Observed",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
            Object {
              "marker": Object {
                "color": "#000000",
                "size": 6,
              },
              "mode": "markers",
              "name": "Incorrect Prediction",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
            Object {
              "marker": Object {
                "color": "#ff0000",
                "size": 6,
              },
              "mode": "markers",
              "name": "Correct Prediction",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
          ]
        }
        layout={
          Object {
            "height": 400,
            "legend": Object {
              "xanchor": "right",
              "yanchor": "bottom",
            },
            "showlegend": true,
            "title": "",
            "width": 400,
            "xaxis": Object {
              "gridcolor": "#ff0000",
              "gridwidth": 3,
              "showticklabels": false,
              "tickvals": Array [],
            },
            "yaxis": Object {
              "autorange": "reversed",
              "gridcolor": "#ff0000",
              "gridwidth": 3,
              "showticklabels": false,
              "tickvals": Array [],
            },
          }
        }
        onClickCallback={[Function]}
        onHoverCallback={[Function]}
        onSelectedCallback={[Function]}
        onUnHoverCallback={[Function]}
      >
        <div />
      </PlotlyChart>
    </ScatterChartClass>
  </div>
</ContactMapClass>
`;

exports[`ContactMap Should match existing snapshot using ScatterGL is toggled on. 1`] = `
<ContactMapClass
  correctColor="#ff0000"
  data={
    Object {
      "couplingScores": Array [],
    }
  }
  enableSliders={false}
  height={400}
  highlightColor="#ff0000"
  incorrectColor="#000000"
  observedColor="#0000ff"
  padding={0}
  width={400}
>
  <div
    id="ContactMapComponent"
    style={
      Object {
        "padding": 0,
      }
    }
  >
    <ScatterChartClass
      candidateResidues={Array []}
      data={
        Array [
          Object {
            "color": "#0000ff",
            "name": "Observed",
            "points": Array [],
          },
          Object {
            "color": "#000000",
            "name": "Incorrect Prediction",
            "points": Array [],
          },
          Object {
            "color": "#ff0000",
            "name": "Correct Prediction",
            "points": Array [],
          },
        ]
      }
      height={400}
      hoveredResidues={Array []}
      nodeSize={3}
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      width={400}
    >
      <PlotlyChart
        config={
          Object {
            "displayModeBar": true,
          }
        }
        data={
          Array [
            Object {
              "marker": Object {
                "color": "#0000ff",
                "size": 6,
              },
              "mode": "markers",
              "name": "Observed",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
            Object {
              "marker": Object {
                "color": "#000000",
                "size": 6,
              },
              "mode": "markers",
              "name": "Incorrect Prediction",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
            Object {
              "marker": Object {
                "color": "#ff0000",
                "size": 6,
              },
              "mode": "markers",
              "name": "Correct Prediction",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
          ]
        }
        layout={
          Object {
            "height": 400,
            "legend": Object {
              "xanchor": "right",
              "yanchor": "bottom",
            },
            "showlegend": true,
            "title": "",
            "width": 400,
            "xaxis": Object {
              "gridcolor": "#ff0000",
              "gridwidth": 3,
              "showticklabels": false,
              "tickvals": Array [],
            },
            "yaxis": Object {
              "autorange": "reversed",
              "gridcolor": "#ff0000",
              "gridwidth": 3,
              "showticklabels": false,
              "tickvals": Array [],
            },
          }
        }
        onClickCallback={[Function]}
        onHoverCallback={[Function]}
        onSelectedCallback={[Function]}
        onUnHoverCallback={[Function]}
      >
        <div />
      </PlotlyChart>
    </ScatterChartClass>
  </div>
</ContactMapClass>
`;

exports[`ContactMap Should match existing snapshot when given empty data. 1`] = `<[object Object] />`;

exports[`ContactMap Should match existing snapshot when given no data. 1`] = `<[object Object] />`;

exports[`ContactMap Should match existing snapshot when given sample data and sliders are _not_ enabled. 1`] = `
<div
  id="ContactMapComponent"
  style={
    Object {
      "padding": 0,
    }
  }
>
  <div />
</div>
`;

exports[`ContactMap Should match existing snapshot when given sample data and sliders are enabled. 1`] = `
<div
  id="ContactMapComponent"
  style={
    Object {
      "padding": 0,
    }
  }
>
  <div />
  <div>
    <div
      className="node-size-slider"
      style={
        Object {
          "padding": 20,
        }
      }
    >
      <p>
        Node Size: 3
      </p>
      <div
        className="rc-slider"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        onTouchStart={[Function]}
        style={
          Object {
            "width": 360,
          }
        }
      >
        <div
          className="rc-slider-rail"
          style={Object {}}
        />
        <div
          className="rc-slider-track"
          style={
            Object {
              "left": "0%",
              "width": "50%",
            }
          }
        />
        <div
          className="rc-slider-step"
        />
        <div
          aria-disabled={false}
          aria-valuemax={5}
          aria-valuemin={1}
          aria-valuenow={3}
          className="rc-slider-handle"
          role="slider"
          style={
            Object {
              "left": "50%",
            }
          }
          tabIndex={0}
        />
        <div
          className="rc-slider-mark"
        />
      </div>
    </div>
    <div
      className="predicted-contact-slider"
      style={
        Object {
          "padding": 20,
        }
      }
    >
      <p>
        # Predicted Contacts to Show: 100
      </p>
      <div
        className="rc-slider rc-slider-with-marks"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        onTouchStart={[Function]}
        style={
          Object {
            "width": 360,
          }
        }
      >
        <div
          className="rc-slider-rail"
          style={Object {}}
        />
        <div
          className="rc-slider-track"
          style={
            Object {
              "left": "0%",
              "width": "100%",
            }
          }
        />
        <div
          className="rc-slider-step"
        >
          <span
            className="rc-slider-dot rc-slider-dot-active"
            style={
              Object {
                "left": "0%",
              }
            }
          />
          <span
            className="rc-slider-dot rc-slider-dot-active"
            style={
              Object {
                "left": "50%",
              }
            }
          />
          <span
            className="rc-slider-dot rc-slider-dot-active"
            style={
              Object {
                "left": "100%",
              }
            }
          />
        </div>
        <div
          aria-disabled={false}
          aria-valuemax={6}
          aria-valuemin={0}
          aria-valuenow={6}
          className="rc-slider-handle"
          role="slider"
          style={
            Object {
              "left": "100%",
            }
          }
          tabIndex={0}
        />
        <div
          className="rc-slider-mark"
        >
          <span
            className="rc-slider-mark-text rc-slider-mark-text-active"
            style={
              Object {
                "left": "0%",
                "marginLeft": "-22.5%",
                "width": "45%",
              }
            }
          >
            None
          </span>
          <span
            className="rc-slider-mark-text rc-slider-mark-text-active"
            style={
              Object {
                "left": "50%",
                "marginLeft": "-22.5%",
                "width": "45%",
              }
            }
          >
            Half (3)
          </span>
          <span
            className="rc-slider-mark-text rc-slider-mark-text-active"
            style={
              Object {
                "left": "100%",
                "marginLeft": "-22.5%",
                "width": "45%",
              }
            }
          >
            All (6)
          </span>
        </div>
      </div>
    </div>
    <div
      className="contact-view-slider"
      style={
        Object {
          "padding": 20,
        }
      }
    >
      <div
        className="rc-slider rc-slider-with-marks"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        onTouchStart={[Function]}
        style={
          Object {
            "width": 360,
          }
        }
      >
        <div
          className="rc-slider-rail"
          style={Object {}}
        />
        <div
          className="rc-slider-track"
          style={
            Object {
              "left": "0%",
              "width": "50%",
            }
          }
        />
        <div
          className="rc-slider-step"
        >
          <span
            className="rc-slider-dot rc-slider-dot-active"
            style={
              Object {
                "left": "0%",
              }
            }
          />
          <span
            className="rc-slider-dot rc-slider-dot-active"
            style={
              Object {
                "left": "50%",
              }
            }
          />
          <span
            className="rc-slider-dot"
            style={
              Object {
                "left": "100%",
              }
            }
          />
        </div>
        <div
          aria-disabled={false}
          aria-valuemax={2}
          aria-valuemin={0}
          aria-valuenow={1}
          className="rc-slider-handle"
          role="slider"
          style={
            Object {
              "left": "50%",
            }
          }
          tabIndex={0}
        />
        <div
          className="rc-slider-mark"
        >
          <span
            className="rc-slider-mark-text rc-slider-mark-text-active"
            style={
              Object {
                "left": "0%",
                "marginLeft": "-22.5%",
                "width": "45%",
              }
            }
          >
            Observed
          </span>
          <span
            className="rc-slider-mark-text rc-slider-mark-text-active"
            style={
              Object {
                "left": "50%",
                "marginLeft": "-22.5%",
                "width": "45%",
              }
            }
          >
            Both
          </span>
          <span
            className="rc-slider-mark-text"
            style={
              Object {
                "left": "100%",
                "marginLeft": "-22.5%",
                "width": "45%",
              }
            }
          >
            Predicted
          </span>
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`ContactMap Snapshots Should match existing snapshot using ScatterGL is toggled off. 1`] = `
<ContactMapClass
  correctColor="#ff0000"
  data={
    Object {
      "couplingScores": Array [],
    }
  }
  enableSliders={false}
  height={400}
  highlightColor="#ff0000"
  incorrectColor="#000000"
  observedColor="#0000ff"
  padding={0}
  width={400}
>
  <div
    id="ContactMapComponent"
    style={
      Object {
        "padding": 0,
      }
    }
  >
    <ScatterChartClass
      candidateResidues={Array []}
      data={
        Array [
          Object {
            "color": "#0000ff",
            "name": "Observed",
            "points": Array [],
          },
          Object {
            "color": "#000000",
            "name": "Incorrect Prediction",
            "points": Array [],
          },
          Object {
            "color": "#ff0000",
            "name": "Correct Prediction",
            "points": Array [],
          },
        ]
      }
      height={400}
      hoveredResidues={Array []}
      nodeSize={3}
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      width={400}
    >
      <PlotlyChart
        config={
          Object {
            "displayModeBar": true,
          }
        }
        data={
          Array [
            Object {
              "marker": Object {
                "color": "#0000ff",
                "size": 6,
              },
              "mode": "markers",
              "name": "Observed",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
            Object {
              "marker": Object {
                "color": "#000000",
                "size": 6,
              },
              "mode": "markers",
              "name": "Incorrect Prediction",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
            Object {
              "marker": Object {
                "color": "#ff0000",
                "size": 6,
              },
              "mode": "markers",
              "name": "Correct Prediction",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
          ]
        }
        layout={
          Object {
            "height": 400,
            "legend": Object {
              "xanchor": "right",
              "yanchor": "bottom",
            },
            "showlegend": true,
            "title": "",
            "width": 400,
            "xaxis": Object {
              "gridcolor": "#ff0000",
              "gridwidth": 3,
              "showticklabels": false,
              "tickvals": Array [],
            },
            "yaxis": Object {
              "autorange": "reversed",
              "gridcolor": "#ff0000",
              "gridwidth": 3,
              "showticklabels": false,
              "tickvals": Array [],
            },
          }
        }
        onClickCallback={[Function]}
        onHoverCallback={[Function]}
        onSelectedCallback={[Function]}
        onUnHoverCallback={[Function]}
      >
        <div />
      </PlotlyChart>
    </ScatterChartClass>
  </div>
</ContactMapClass>
`;

exports[`ContactMap Snapshots Should match existing snapshot using ScatterGL is toggled on. 1`] = `
<ContactMapClass
  correctColor="#ff0000"
  data={
    Object {
      "couplingScores": Array [],
    }
  }
  enableSliders={false}
  height={400}
  highlightColor="#ff0000"
  incorrectColor="#000000"
  observedColor="#0000ff"
  padding={0}
  width={400}
>
  <div
    id="ContactMapComponent"
    style={
      Object {
        "padding": 0,
      }
    }
  >
    <ScatterChartClass
      candidateResidues={Array []}
      data={
        Array [
          Object {
            "color": "#0000ff",
            "name": "Observed",
            "points": Array [],
          },
          Object {
            "color": "#000000",
            "name": "Incorrect Prediction",
            "points": Array [],
          },
          Object {
            "color": "#ff0000",
            "name": "Correct Prediction",
            "points": Array [],
          },
        ]
      }
      height={400}
      hoveredResidues={Array []}
      nodeSize={3}
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      width={400}
    >
      <PlotlyChart
        config={
          Object {
            "displayModeBar": true,
          }
        }
        data={
          Array [
            Object {
              "marker": Object {
                "color": "#0000ff",
                "size": 6,
              },
              "mode": "markers",
              "name": "Observed",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
            Object {
              "marker": Object {
                "color": "#000000",
                "size": 6,
              },
              "mode": "markers",
              "name": "Incorrect Prediction",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
            Object {
              "marker": Object {
                "color": "#ff0000",
                "size": 6,
              },
              "mode": "markers",
              "name": "Correct Prediction",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
          ]
        }
        layout={
          Object {
            "height": 400,
            "legend": Object {
              "xanchor": "right",
              "yanchor": "bottom",
            },
            "showlegend": true,
            "title": "",
            "width": 400,
            "xaxis": Object {
              "gridcolor": "#ff0000",
              "gridwidth": 3,
              "showticklabels": false,
              "tickvals": Array [],
            },
            "yaxis": Object {
              "autorange": "reversed",
              "gridcolor": "#ff0000",
              "gridwidth": 3,
              "showticklabels": false,
              "tickvals": Array [],
            },
          }
        }
        onClickCallback={[Function]}
        onHoverCallback={[Function]}
        onSelectedCallback={[Function]}
        onUnHoverCallback={[Function]}
      >
        <div />
      </PlotlyChart>
    </ScatterChartClass>
  </div>
</ContactMapClass>
`;

exports[`ContactMap Snapshots Should match existing snapshot when given empty data. 1`] = `<[object Object] />`;

exports[`ContactMap Snapshots Should match existing snapshot when given no data. 1`] = `<[object Object] />`;

exports[`ContactMap Snapshots Should match existing snapshot when given sample data and sliders are _not_ enabled. 1`] = `
<div
  id="ContactMapComponent"
  style={
    Object {
      "padding": 0,
    }
  }
>
  <div />
</div>
`;

exports[`ContactMap Snapshots Should match existing snapshot when given sample data and sliders are enabled. 1`] = `
<div
  id="ContactMapComponent"
  style={
    Object {
      "padding": 0,
    }
  }
>
  <div />
  <div>
    <div
      className="node-size-slider"
      style={
        Object {
          "padding": 20,
        }
      }
    >
      <p>
        Node Size: 3
      </p>
      <div
        className="rc-slider"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        onTouchStart={[Function]}
        style={
          Object {
            "width": 360,
          }
        }
      >
        <div
          className="rc-slider-rail"
          style={Object {}}
        />
        <div
          className="rc-slider-track"
          style={
            Object {
              "left": "0%",
              "width": "50%",
            }
          }
        />
        <div
          className="rc-slider-step"
        />
        <div
          aria-disabled={false}
          aria-valuemax={5}
          aria-valuemin={1}
          aria-valuenow={3}
          className="rc-slider-handle"
          role="slider"
          style={
            Object {
              "left": "50%",
            }
          }
          tabIndex={0}
        />
        <div
          className="rc-slider-mark"
        />
      </div>
    </div>
    <div
      className="predicted-contact-slider"
      style={
        Object {
          "padding": 20,
        }
      }
    >
      <p>
        # Predicted Contacts to Show: 100
      </p>
      <div
        className="rc-slider rc-slider-with-marks"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        onTouchStart={[Function]}
        style={
          Object {
            "width": 360,
          }
        }
      >
        <div
          className="rc-slider-rail"
          style={Object {}}
        />
        <div
          className="rc-slider-track"
          style={
            Object {
              "left": "0%",
              "width": "100%",
            }
          }
        />
        <div
          className="rc-slider-step"
        >
          <span
            className="rc-slider-dot rc-slider-dot-active"
            style={
              Object {
                "left": "0%",
              }
            }
          />
          <span
            className="rc-slider-dot rc-slider-dot-active"
            style={
              Object {
                "left": "50%",
              }
            }
          />
          <span
            className="rc-slider-dot rc-slider-dot-active"
            style={
              Object {
                "left": "100%",
              }
            }
          />
        </div>
        <div
          aria-disabled={false}
          aria-valuemax={6}
          aria-valuemin={0}
          aria-valuenow={6}
          className="rc-slider-handle"
          role="slider"
          style={
            Object {
              "left": "100%",
            }
          }
          tabIndex={0}
        />
        <div
          className="rc-slider-mark"
        >
          <span
            className="rc-slider-mark-text rc-slider-mark-text-active"
            style={
              Object {
                "left": "0%",
                "marginLeft": "-22.5%",
                "width": "45%",
              }
            }
          >
            None
          </span>
          <span
            className="rc-slider-mark-text rc-slider-mark-text-active"
            style={
              Object {
                "left": "50%",
                "marginLeft": "-22.5%",
                "width": "45%",
              }
            }
          >
            Half (3)
          </span>
          <span
            className="rc-slider-mark-text rc-slider-mark-text-active"
            style={
              Object {
                "left": "100%",
                "marginLeft": "-22.5%",
                "width": "45%",
              }
            }
          >
            All (6)
          </span>
        </div>
      </div>
    </div>
    <div
      className="contact-view-slider"
      style={
        Object {
          "padding": 20,
        }
      }
    >
      <div
        className="rc-slider rc-slider-with-marks"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        onTouchStart={[Function]}
        style={
          Object {
            "width": 360,
          }
        }
      >
        <div
          className="rc-slider-rail"
          style={Object {}}
        />
        <div
          className="rc-slider-track"
          style={
            Object {
              "left": "0%",
              "width": "50%",
            }
          }
        />
        <div
          className="rc-slider-step"
        >
          <span
            className="rc-slider-dot rc-slider-dot-active"
            style={
              Object {
                "left": "0%",
              }
            }
          />
          <span
            className="rc-slider-dot rc-slider-dot-active"
            style={
              Object {
                "left": "50%",
              }
            }
          />
          <span
            className="rc-slider-dot"
            style={
              Object {
                "left": "100%",
              }
            }
          />
        </div>
        <div
          aria-disabled={false}
          aria-valuemax={2}
          aria-valuemin={0}
          aria-valuenow={1}
          className="rc-slider-handle"
          role="slider"
          style={
            Object {
              "left": "50%",
            }
          }
          tabIndex={0}
        />
        <div
          className="rc-slider-mark"
        >
          <span
            className="rc-slider-mark-text rc-slider-mark-text-active"
            style={
              Object {
                "left": "0%",
                "marginLeft": "-22.5%",
                "width": "45%",
              }
            }
          >
            Observed
          </span>
          <span
            className="rc-slider-mark-text rc-slider-mark-text-active"
            style={
              Object {
                "left": "50%",
                "marginLeft": "-22.5%",
                "width": "45%",
              }
            }
          >
            Both
          </span>
          <span
            className="rc-slider-mark-text"
            style={
              Object {
                "left": "100%",
                "marginLeft": "-22.5%",
                "width": "45%",
              }
            }
          >
            Predicted
          </span>
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`ContactMap Snapshots Should match snapshot when locked residues are added. 1`] = `
<ContactMapClass
  correctColor="#ff0000"
  data={
    Object {
      "couplingScores": Array [
        Object {
          "dist": 2.4,
          "i": 56,
          "j": 58,
        },
        Object {
          "dist": 1.3,
          "i": 45,
          "j": 46,
        },
        Object {
          "dist": 1.3,
          "i": 44,
          "j": 45,
        },
        Object {
          "dist": 1.3,
          "i": 56,
          "j": 57,
        },
        Object {
          "dist": 1.3,
          "i": 57,
          "j": 58,
        },
        Object {
          "dist": 11.3,
          "i": 41,
          "j": 52,
        },
      ],
    }
  }
  enableSliders={false}
  height={400}
  highlightColor="#ff0000"
  incorrectColor="#000000"
  lockedResiduePairs={
    Object {
      "37,46": Array [
        37,
        46,
      ],
      "8": Array [
        8,
      ],
    }
  }
  observedColor="#0000ff"
  padding={0}
  width={400}
>
  <div
    id="ContactMapComponent"
    style={
      Object {
        "padding": 0,
      }
    }
  >
    <ScatterChartClass
      candidateResidues={Array []}
      data={
        Array [
          Object {
            "color": "#0000ff",
            "name": "Observed",
            "points": Array [
              Object {
                "dist": 2.4,
                "i": 56,
                "j": 58,
              },
            ],
          },
          Object {
            "color": "#000000",
            "name": "Incorrect Prediction",
            "points": Array [
              Object {
                "dist": 11.3,
                "i": 41,
                "j": 52,
              },
            ],
          },
          Object {
            "color": "#ff0000",
            "name": "Correct Prediction",
            "points": Array [],
          },
          Object {
            "color": "#ff0000",
            "name": "Locked Residue",
            "points": Array [
              Object {
                "i": 37,
                "j": 46,
              },
            ],
          },
        ]
      }
      height={400}
      hoveredResidues={Array []}
      nodeSize={3}
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      width={400}
    >
      <PlotlyChart
        config={
          Object {
            "displayModeBar": true,
          }
        }
        data={
          Array [
            Object {
              "marker": Object {
                "color": "#0000ff",
                "size": 6,
              },
              "mode": "markers",
              "name": "Observed",
              "type": "scattergl",
              "x": Array [
                56,
                58,
              ],
              "y": Array [
                58,
                56,
              ],
            },
            Object {
              "marker": Object {
                "color": "#000000",
                "size": 6,
              },
              "mode": "markers",
              "name": "Incorrect Prediction",
              "type": "scattergl",
              "x": Array [
                41,
                52,
              ],
              "y": Array [
                52,
                41,
              ],
            },
            Object {
              "marker": Object {
                "color": "#ff0000",
                "size": 6,
              },
              "mode": "markers",
              "name": "Correct Prediction",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
            Object {
              "marker": Object {
                "color": "#ff0000",
                "size": 6,
              },
              "mode": "markers",
              "name": "Locked Residue",
              "type": "scattergl",
              "x": Array [
                37,
                46,
              ],
              "y": Array [
                46,
                37,
              ],
            },
          ]
        }
        layout={
          Object {
            "height": 400,
            "legend": Object {
              "xanchor": "right",
              "yanchor": "bottom",
            },
            "showlegend": true,
            "title": "",
            "width": 400,
            "xaxis": Object {
              "gridcolor": "#ff0000",
              "gridwidth": 3,
              "showticklabels": false,
              "tickvals": Array [],
            },
            "yaxis": Object {
              "autorange": "reversed",
              "gridcolor": "#ff0000",
              "gridwidth": 3,
              "showticklabels": false,
              "tickvals": Array [],
            },
          }
        }
        onClickCallback={[Function]}
        onHoverCallback={[Function]}
        onSelectedCallback={[Function]}
        onUnHoverCallback={[Function]}
      >
        <div />
      </PlotlyChart>
    </ScatterChartClass>
  </div>
</ContactMapClass>
`;

exports[`Should match existing snapshot using ScatterGL is toggled off. 1`] = `
<ContactMapClass
  addCandidateResidues={[Function]}
  addHoveredResidues={[Function]}
  addLockedResiduePair={[Function]}
  candidateResidues={Array []}
  correctColor="#ff0000"
  data={
    Object {
      "couplingScores": Array [],
    }
  }
  enableSliders={false}
  height={400}
  highlightColor="#ff0000"
  hoveredResidues={Array []}
  incorrectColor="#000000"
  lockedResiduePairs={Object {}}
  observedColor="#0000ff"
  padding={0}
  removeAllLockedResiduePairs={[Function]}
  removeCandidateResidues={[Function]}
  removeHoveredResidues={[Function]}
  removeLockedResiduePair={[Function]}
  width={400}
>
  <div
    id="ContactMapComponent"
    style={
      Object {
        "padding": 0,
      }
    }
  >
    <ScatterChartClass
      candidateResidues={Array []}
      data={
        Array [
          Object {
            "color": "#0000ff",
            "name": "Observed",
            "points": Array [],
          },
          Object {
            "color": "#000000",
            "name": "Incorrect Prediction",
            "points": Array [],
          },
          Object {
            "color": "#ff0000",
            "name": "Correct Prediction",
            "points": Array [],
          },
        ]
      }
      height={400}
      hoveredResidues={Array []}
      nodeSize={3}
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      width={400}
    >
      <PlotlyChart
        config={
          Object {
            "displayModeBar": true,
          }
        }
        data={
          Array [
            Object {
              "marker": Object {
                "color": "#0000ff",
                "size": 6,
              },
              "mode": "markers",
              "name": "Observed",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
            Object {
              "marker": Object {
                "color": "#000000",
                "size": 6,
              },
              "mode": "markers",
              "name": "Incorrect Prediction",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
            Object {
              "marker": Object {
                "color": "#ff0000",
                "size": 6,
              },
              "mode": "markers",
              "name": "Correct Prediction",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
          ]
        }
        layout={
          Object {
            "height": 400,
            "legend": Object {
              "xanchor": "right",
              "yanchor": "bottom",
            },
            "showlegend": true,
            "title": "",
            "width": 400,
            "xaxis": Object {
              "gridcolor": "#ff0000",
              "gridwidth": 3,
              "showticklabels": false,
              "tickvals": Array [],
            },
            "yaxis": Object {
              "autorange": "reversed",
              "gridcolor": "#ff0000",
              "gridwidth": 3,
              "showticklabels": false,
              "tickvals": Array [],
            },
          }
        }
        onClickCallback={[Function]}
        onHoverCallback={[Function]}
        onSelectedCallback={[Function]}
        onUnHoverCallback={[Function]}
      >
        <div />
      </PlotlyChart>
    </ScatterChartClass>
  </div>
</ContactMapClass>
`;

exports[`Should match existing snapshot using ScatterGL is toggled on. 1`] = `
<ContactMapClass
  addCandidateResidues={[Function]}
  addHoveredResidues={[Function]}
  addLockedResiduePair={[Function]}
  candidateResidues={Array []}
  correctColor="#ff0000"
  data={
    Object {
      "couplingScores": Array [],
    }
  }
  enableSliders={false}
  height={400}
  highlightColor="#ff0000"
  hoveredResidues={Array []}
  incorrectColor="#000000"
  lockedResiduePairs={Object {}}
  observedColor="#0000ff"
  padding={0}
  removeAllLockedResiduePairs={[Function]}
  removeCandidateResidues={[Function]}
  removeHoveredResidues={[Function]}
  removeLockedResiduePair={[Function]}
  width={400}
>
  <div
    id="ContactMapComponent"
    style={
      Object {
        "padding": 0,
      }
    }
  >
    <ScatterChartClass
      candidateResidues={Array []}
      data={
        Array [
          Object {
            "color": "#0000ff",
            "name": "Observed",
            "points": Array [],
          },
          Object {
            "color": "#000000",
            "name": "Incorrect Prediction",
            "points": Array [],
          },
          Object {
            "color": "#ff0000",
            "name": "Correct Prediction",
            "points": Array [],
          },
        ]
      }
      height={400}
      hoveredResidues={Array []}
      nodeSize={3}
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      width={400}
    >
      <PlotlyChart
        config={
          Object {
            "displayModeBar": true,
          }
        }
        data={
          Array [
            Object {
              "marker": Object {
                "color": "#0000ff",
                "size": 6,
              },
              "mode": "markers",
              "name": "Observed",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
            Object {
              "marker": Object {
                "color": "#000000",
                "size": 6,
              },
              "mode": "markers",
              "name": "Incorrect Prediction",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
            Object {
              "marker": Object {
                "color": "#ff0000",
                "size": 6,
              },
              "mode": "markers",
              "name": "Correct Prediction",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
          ]
        }
        layout={
          Object {
            "height": 400,
            "legend": Object {
              "xanchor": "right",
              "yanchor": "bottom",
            },
            "showlegend": true,
            "title": "",
            "width": 400,
            "xaxis": Object {
              "gridcolor": "#ff0000",
              "gridwidth": 3,
              "showticklabels": false,
              "tickvals": Array [],
            },
            "yaxis": Object {
              "autorange": "reversed",
              "gridcolor": "#ff0000",
              "gridwidth": 3,
              "showticklabels": false,
              "tickvals": Array [],
            },
          }
        }
        onClickCallback={[Function]}
        onHoverCallback={[Function]}
        onSelectedCallback={[Function]}
        onUnHoverCallback={[Function]}
      >
        <div />
      </PlotlyChart>
    </ScatterChartClass>
  </div>
</ContactMapClass>
`;
