// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ContactMap Should match existing snapshot using ScatterGL is toggled off. 1`] = `
<ContactMapClass
  addCandidateResidues={[Function]}
  addHoveredResidues={[Function]}
  addLockedResiduePair={[Function]}
  candidateResidues={Array []}
  contactColor="#009999"
  couplingColor="#000000"
  data={
    Object {
      "contactMonomer": Array [],
      "couplingScore": Array [],
      "distanceMapMonomer": Array [],
      "observedMonomer": Array [],
    }
  }
  enableSliders={false}
  height={400}
  highlightColor="#0000ff"
  hoveredResidues={Array []}
  lockedResiduePairs={Object {}}
  observedColor="#ff8800"
  padding={0}
  removeAllLockedResiduePairs={[Function]}
  removeCandidateResidues={[Function]}
  removeHoveredResidues={[Function]}
  removeLockedResiduePair={[Function]}
  width={400}
>
  <div
    id="ContactMapComponent"
    style={
      Object {
        "padding": 0,
      }
    }
  >
    <ScatterChartClass
      candidateResidues={Array []}
      data={
        Array [
          Object {
            "color": "#009999",
            "points": Array [],
          },
          Object {
            "color": "#000000",
            "points": Array [],
          },
          Object {
            "color": "#ff8800",
            "points": Array [],
          },
        ]
      }
      height={400}
      hoveredResidues={Array []}
      nodeSize={4}
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      width={400}
    >
      <PlotlyChart
        config={
          Object {
            "displayModeBar": true,
          }
        }
        data={
          Array [
            Object {
              "marker": Object {
                "color": "#009999",
                "sizemax": 8,
                "sizemin": 4,
              },
              "mode": "markers",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
            Object {
              "marker": Object {
                "color": "#000000",
                "sizemax": 8,
                "sizemin": 4,
              },
              "mode": "markers",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
            Object {
              "marker": Object {
                "color": "#ff8800",
                "sizemax": 8,
                "sizemin": 4,
              },
              "mode": "markers",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
          ]
        }
        layout={
          Object {
            "height": 400,
            "legend": Object {},
            "showlegend": false,
            "title": "",
            "width": 400,
            "xaxis": Object {
              "gridcolor": "#ff0000",
              "gridwidth": 4,
              "showticklabels": false,
              "tickvals": Array [],
            },
            "yaxis": Object {
              "autorange": "reversed",
              "gridcolor": "#ff0000",
              "gridwidth": 4,
              "showticklabels": false,
              "tickvals": Array [],
            },
          }
        }
        onClickCallback={[Function]}
        onHoverCallback={[Function]}
        onSelectedCallback={[Function]}
        onUnHoverCallback={[Function]}
      >
        <div />
      </PlotlyChart>
    </ScatterChartClass>
    <Checkbox
      defaultChecked={false}
      label="ScatterGL"
      onChange={[Function]}
      toggle={true}
      type="checkbox"
    >
      <div
        className="ui toggle checkbox"
        onChange={[Function]}
        onClick={[Function]}
        onMouseDown={[Function]}
      >
        <input
          checked={false}
          className="hidden"
          onClick={[Function]}
          readOnly={true}
          tabIndex={0}
          type="checkbox"
        />
        <label
          key="ScatterGL"
        >
          ScatterGL
        </label>
      </div>
    </Checkbox>
  </div>
</ContactMapClass>
`;

exports[`ContactMap Should match existing snapshot using ScatterGL is toggled on. 1`] = `
<ContactMapClass
  addCandidateResidues={[Function]}
  addHoveredResidues={[Function]}
  addLockedResiduePair={[Function]}
  candidateResidues={Array []}
  contactColor="#009999"
  couplingColor="#000000"
  data={
    Object {
      "contactMonomer": Array [],
      "couplingScore": Array [],
      "distanceMapMonomer": Array [],
      "observedMonomer": Array [],
    }
  }
  enableSliders={false}
  height={400}
  highlightColor="#0000ff"
  hoveredResidues={Array []}
  lockedResiduePairs={Object {}}
  observedColor="#ff8800"
  padding={0}
  removeAllLockedResiduePairs={[Function]}
  removeCandidateResidues={[Function]}
  removeHoveredResidues={[Function]}
  removeLockedResiduePair={[Function]}
  width={400}
>
  <div
    id="ContactMapComponent"
    style={
      Object {
        "padding": 0,
      }
    }
  >
    <ScatterChartClass
      candidateResidues={Array []}
      data={
        Array [
          Object {
            "color": "#009999",
            "points": Array [],
          },
          Object {
            "color": "#000000",
            "points": Array [],
          },
          Object {
            "color": "#ff8800",
            "points": Array [],
          },
        ]
      }
      height={400}
      hoveredResidues={Array []}
      nodeSize={4}
      onClickCallback={[Function]}
      onHoverCallback={[Function]}
      onSelectedCallback={[Function]}
      onUnHoverCallback={[Function]}
      width={400}
    >
      <PlotlyChart
        config={
          Object {
            "displayModeBar": true,
          }
        }
        data={
          Array [
            Object {
              "marker": Object {
                "color": "#009999",
                "sizemax": 8,
                "sizemin": 4,
              },
              "mode": "markers",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
            Object {
              "marker": Object {
                "color": "#000000",
                "sizemax": 8,
                "sizemin": 4,
              },
              "mode": "markers",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
            Object {
              "marker": Object {
                "color": "#ff8800",
                "sizemax": 8,
                "sizemin": 4,
              },
              "mode": "markers",
              "type": "scattergl",
              "x": Array [],
              "y": Array [],
            },
          ]
        }
        layout={
          Object {
            "height": 400,
            "legend": Object {},
            "showlegend": false,
            "title": "",
            "width": 400,
            "xaxis": Object {
              "gridcolor": "#ff0000",
              "gridwidth": 4,
              "showticklabels": false,
              "tickvals": Array [],
            },
            "yaxis": Object {
              "autorange": "reversed",
              "gridcolor": "#ff0000",
              "gridwidth": 4,
              "showticklabels": false,
              "tickvals": Array [],
            },
          }
        }
        onClickCallback={[Function]}
        onHoverCallback={[Function]}
        onSelectedCallback={[Function]}
        onUnHoverCallback={[Function]}
      >
        <div />
      </PlotlyChart>
    </ScatterChartClass>
    <Checkbox
      defaultChecked={false}
      label="ScatterGL"
      onChange={[Function]}
      toggle={true}
      type="checkbox"
    >
      <div
        className="ui toggle checkbox"
        onChange={[Function]}
        onClick={[Function]}
        onMouseDown={[Function]}
      >
        <input
          checked={false}
          className="hidden"
          onClick={[Function]}
          readOnly={true}
          tabIndex={0}
          type="checkbox"
        />
        <label
          key="ScatterGL"
        >
          ScatterGL
        </label>
      </div>
    </Checkbox>
  </div>
</ContactMapClass>
`;

exports[`ContactMap Should match existing snapshot when given empty data. 1`] = `<[object Object] />`;

exports[`ContactMap Should match existing snapshot when given no data. 1`] = `<[object Object] />`;

exports[`ContactMap Should match existing snapshot when given sample data and sliders are _not_ enabled. 1`] = `
<div
  id="ContactMapComponent"
  style={
    Object {
      "padding": 0,
    }
  }
>
  <div />
  <div
    className="ui toggle checkbox"
    onChange={[Function]}
    onClick={[Function]}
    onMouseDown={[Function]}
  >
    <input
      checked={false}
      className="hidden"
      id={undefined}
      name={undefined}
      onClick={[Function]}
      readOnly={true}
      tabIndex={0}
      type="checkbox"
      value={undefined}
    />
    <label
      htmlFor={undefined}
    >
      ScatterGL
    </label>
  </div>
</div>
`;

exports[`ContactMap Should match existing snapshot when given sample data and sliders are enabled. 1`] = `
<div
  id="ContactMapComponent"
  style={
    Object {
      "padding": 0,
    }
  }
>
  <div />
  <div>
    <div>
      <p>
        Probability: 99
      </p>
      <div
        className="rc-slider"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        onTouchStart={[Function]}
        style={
          Object {
            "width": 400,
          }
        }
      >
        <div
          className="rc-slider-rail"
          style={Object {}}
        />
        <div
          className="rc-slider-track"
          style={
            Object {
              "left": "0%",
              "width": "99%",
            }
          }
        />
        <div
          className="rc-slider-step"
        />
        <div
          aria-disabled={false}
          aria-valuemax={100}
          aria-valuemin={0}
          aria-valuenow={99}
          className="rc-slider-handle"
          role="slider"
          style={
            Object {
              "left": "99%",
            }
          }
          tabIndex={0}
        />
        <div
          className="rc-slider-mark"
        />
      </div>
    </div>
    <div>
      <p>
        Node Size: 4
      </p>
      <div
        className="rc-slider"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        onTouchStart={[Function]}
        style={
          Object {
            "width": 400,
          }
        }
      >
        <div
          className="rc-slider-rail"
          style={Object {}}
        />
        <div
          className="rc-slider-track"
          style={
            Object {
              "left": "0%",
              "width": "75%",
            }
          }
        />
        <div
          className="rc-slider-step"
        />
        <div
          aria-disabled={false}
          aria-valuemax={5}
          aria-valuemin={1}
          aria-valuenow={4}
          className="rc-slider-handle"
          role="slider"
          style={
            Object {
              "left": "75%",
            }
          }
          tabIndex={0}
        />
        <div
          className="rc-slider-mark"
        />
      </div>
    </div>
  </div>
  <div
    className="ui toggle checkbox"
    onChange={[Function]}
    onClick={[Function]}
    onMouseDown={[Function]}
  >
    <input
      checked={false}
      className="hidden"
      id={undefined}
      name={undefined}
      onClick={[Function]}
      readOnly={true}
      tabIndex={0}
      type="checkbox"
      value={undefined}
    />
    <label
      htmlFor={undefined}
    >
      ScatterGL
    </label>
  </div>
</div>
`;
